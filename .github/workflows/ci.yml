name: React CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    name: Setup Project
    runs-on: ubuntu-latest
    outputs:
      node_modules: ${{ steps.install-deps.outputs.node_modules }}

    steps:
      # 1. Fazer o checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js e Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      # 3. Instalar dependências
      - name: Install dependencies
        id: install-deps
        run: yarn install

  lint:
    name: Run Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Reutiliza o checkout do código e a instalação de dependências
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      # 4. Rodar o ESLint
      - name: Run ESLint
        run: yarn lint

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Checkout do código e a instalação de dependências
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      # 4. Rodar os testes com cobertura
      - name: Run tests with coverage
        run: yarn test --ci --silent --coverage

      # 5. Verificar se o relatório de cobertura foi gerado
      - name: Check coverage report
        run: |
          if [ ! -d "coverage" ]; then
            echo "Erro: Relatório de cobertura não foi gerado."
            exit 1
          fi
          echo "Relatório de cobertura gerado com sucesso."

      # 6. Enviar relatório de cobertura para o Codecov
      - name: Upload coverage to Codecov
        run: yarn coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Check
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Checkout do código e a instalação de dependências
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      # 4. Verificar vulnerabilidades de segurança
      - name: Run security audit
        run: yarn audit

  build:
    name: Build Project
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Checkout do código e a instalação de dependências
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      # 4. Fazer o build do projeto
      - name: Build project
        run: yarn build

  deploy:
    name: Deploy Project
    needs: [lint, test, security, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      # Checkout do código e a instalação de dependências
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      # 4. Fazer o build do projeto
      - name: Build project
        run: yarn build

      # 5. Deploy (substitua pelo seu processo de deploy)
      - name: Deploy to Production
        run: echo "Deploying to production..."
